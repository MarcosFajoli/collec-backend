// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Conta {
  id                 Int                   @id @default(autoincrement())
  //username           String                @unique
  email              String                @unique
  password           String
  nome               String
  //tel                String
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @default(now())
  ambientesCriados   Ambiente[]
  listasParticipadas ListaContasAmbiente[]

  @@map("conta")
}

model Ambiente {
  id        Int                   @id @default(autoincrement())
  nome      String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @default(now())
  createdBy Conta                 @relation(fields: [contaId], references: [id])
  contaId   Int
  userList  ListaContasAmbiente[]
  Livro     Livro[]

  @@map("ambiente")
}

model ListaContasAmbiente {
  ambienteId Int
  contaId    Int

  ambiente Ambiente @relation(fields: [ambienteId], references: [id], onDelete: Cascade)
  conta    Conta    @relation(fields: [contaId], references: [id], onDelete: Cascade)

  @@id([ambienteId, contaId])
  @@map("ambiente_userlist")
}

model Estilo {
  id        Int     @id @default(autoincrement())
  nome      String  @unique
  descricao String
  Livro     Livro[]

  @@map("estilo")
}

model Categoria {
  id        Int              @id @default(autoincrement())
  nome      String           @unique
  descricao String
  Livros    LivroCategoria[]

  @@map("categoria")
}

model Livro {
  id            Int              @id @default(autoincrement())
  nome          String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now())
  estiloId      Int
  estilo        Estilo           @relation(fields: [estiloId], references: [id])
  ambienteId    Int
  Ambiente      Ambiente         @relation(fields: [ambienteId], references: [id])
  Categorias    LivroCategoria[]
  LivrosColecao LivrosColecao[]

  @@map("livro")
}

model LivroCategoria {
  livroId     Int
  categoriaId Int
  livro       Livro     @relation(fields: [livroId], references: [id], onDelete: Cascade)
  categoria   Categoria @relation(fields: [categoriaId], references: [id], onDelete: Cascade)

  @@id([livroId, categoriaId])
  @@map("livro_categoria")
}

model Colecao {
  id            Int             @id @default(autoincrement())
  nome          String
  LivrosColecao LivrosColecao[]

  @@map("colecao")
}

model LivrosColecao {
  colecaoId Int
  livroId   Int

  colecao Colecao @relation(fields: [colecaoId], references: [id], onDelete: Cascade)
  livro   Livro   @relation(fields: [livroId], references: [id], onDelete: Cascade)

  @@id([colecaoId, livroId])
  @@map("livros_colecao")
}
